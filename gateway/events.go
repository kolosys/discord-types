package gateway

import (
	"github.com/kolosys/discord-types/discord"
	"github.com/kolosys/discord-types/payloads"
)

// ReadyDispatchData represents the data for a Ready event.
//
// See: https://discord.com/developers/docs/topics/gateway-events#ready
type ReadyDispatchData struct {
	// V is the gateway version.
	V int `json:"v"`

	// User is information about the user including email.
	User payloads.User `json:"user"`

	// Guilds are the guilds the user is in.
	Guilds []payloads.UnavailableGuild `json:"guilds"`

	// SessionID is used for resuming connections.
	SessionID string `json:"session_id"`

	// ResumeGatewayURL is the gateway url for resuming connections.
	ResumeGatewayURL string `json:"resume_gateway_url"`

	// Shard is the shard information associated with this session, if sent when identifying.
	Shard *[2]int `json:"shard,omitempty"`

	// Application contains id and flags.
	Application PartialApplication `json:"application"`
}

// PartialApplication represents a partial application object.
type PartialApplication struct {
	ID    discord.Snowflake `json:"id"`
	Flags *int              `json:"flags,omitempty"`
}

// ReadyDispatch represents a Ready dispatch event.
type ReadyDispatch struct {
	Op Opcodes           `json:"op"`
	T  string            `json:"t"`
	S  int               `json:"s"`
	D  ReadyDispatchData `json:"d"`
}

func (e ReadyDispatch) isReceivePayload() {}

// MessageCreateDispatchData represents the data for a Message Create event.
//
// See: https://discord.com/developers/docs/topics/gateway-events#message-create
type MessageCreateDispatchData struct {
	// ID is the id of the message.
	ID discord.Snowflake `json:"id"`

	// ChannelID is the id of the channel the message was sent in.
	ChannelID discord.Snowflake `json:"channel_id"`

	// GuildID is the id of the guild the message was sent in.
	GuildID *discord.Snowflake `json:"guild_id,omitempty"`

	// Author is the user object of the message author.
	Author payloads.User `json:"author"`

	// Member is the guild member object for the author (if the message was sent in a guild).
	Member *GuildMemberNoUser `json:"member,omitempty"`

	// Content is the contents of the message.
	Content string `json:"content"`

	// Timestamp is when this message was sent.
	Timestamp string `json:"timestamp"`

	// EditedTimestamp is when this message was edited (or null if never).
	EditedTimestamp *string `json:"edited_timestamp"`

	// TTS is whether this was a TTS message.
	TTS bool `json:"tts"`

	// MentionEveryone is whether this message mentions everyone.
	MentionEveryone bool `json:"mention_everyone"`

	// Mentions are users specifically mentioned in the message.
	Mentions []UserWithMember `json:"mentions"`

	// MentionRoles are roles specifically mentioned in this message.
	MentionRoles []discord.Snowflake `json:"mention_roles"`

	// MentionChannels are channels specifically mentioned in this message.
	MentionChannels []ChannelMention `json:"mention_channels,omitempty"`

	// Attachments are any attached files.
	Attachments []Attachment `json:"attachments"`

	// Embeds are any embedded content.
	Embeds []Embed `json:"embeds"`

	// Reactions are reactions to the message.
	Reactions []Reaction `json:"reactions,omitempty"`

	// Nonce is used for validating a message was sent.
	Nonce interface{} `json:"nonce,omitempty"`

	// Pinned is whether this message is pinned.
	Pinned bool `json:"pinned"`

	// WebhookID is if the message is generated by a webhook, this is the webhook's id.
	WebhookID *discord.Snowflake `json:"webhook_id,omitempty"`

	// Type is the type of message.
	Type payloads.MessageType `json:"type"`

	// Activity is the message activity object.
	Activity *payloads.MessageActivity `json:"activity,omitempty"`

	// Application is the message application object.
	Application *PartialApplication `json:"application,omitempty"`

	// ApplicationID is if the message is an Interaction or application-owned webhook, this is the id of the application.
	ApplicationID *discord.Snowflake `json:"application_id,omitempty"`

	// MessageReference is the message reference object.
	MessageReference *payloads.MessageReference `json:"message_reference,omitempty"`

	// Flags are message flags combined as a bitfield.
	Flags *payloads.MessageFlags `json:"flags,omitempty"`

	// ReferencedMessage is the message that was replied to.
	ReferencedMessage *MessageCreateDispatchData `json:"referenced_message,omitempty"`

	// Interaction is the interaction object.
	Interaction *payloads.MessageInteraction `json:"interaction,omitempty"`

	// Thread is the thread that was started from this message, includes thread member object.
	Thread *payloads.BasePartialChannel `json:"thread,omitempty"`

	// Components are sent if the message contains components like buttons, action rows, or other interactive components.
	Components []payloads.MessageComponent `json:"components,omitempty"`

	// StickerItems are sent if the message contains stickers.
	StickerItems []payloads.StickerItem `json:"sticker_items,omitempty"`

	// Stickers are the stickers sent with the message.
	Stickers []payloads.Sticker `json:"stickers,omitempty"`

	// Position is a generally increasing integer (there may be gaps or duplicates) that represents the approximate position of the message in a thread.
	Position *int `json:"position,omitempty"`
}

// MessageCreateDispatch represents a Message Create dispatch event.
type MessageCreateDispatch struct {
	Op Opcodes                   `json:"op"`
	T  string                    `json:"t"`
	S  int                       `json:"s"`
	D  MessageCreateDispatchData `json:"d"`
}

func (e MessageCreateDispatch) isReceivePayload() {}

// GuildCreateDispatchData represents the data for a Guild Create event.
//
// See: https://discord.com/developers/docs/topics/gateway-events#guild-create
type GuildCreateDispatchData struct {
	payloads.Guild

	// JoinedAt is when this guild was joined at.
	// This field is only sent within the GUILD_CREATE event.
	JoinedAt string `json:"joined_at"`

	// Large indicates if this is considered a large guild.
	// This field is only sent within the GUILD_CREATE event.
	Large bool `json:"large"`

	// Unavailable indicates if this guild is unavailable due to an outage.
	Unavailable *bool `json:"unavailable,omitempty"`

	// MemberCount is the total number of members in this guild.
	// This field is only sent within the GUILD_CREATE event.
	MemberCount int `json:"member_count"`

	// VoiceStates are states of members currently in voice channels; lacks the guild_id key.
	// This field is only sent within the GUILD_CREATE event.
	VoiceStates []VoiceStateUpdateDispatchData `json:"voice_states"`

	// Members are users in the guild.
	// This field is only sent within the GUILD_CREATE event.
	Members []payloads.GuildMember `json:"members"`

	// Channels are channels in the guild.
	// This field is only sent within the GUILD_CREATE event.
	Channels []payloads.BasePartialChannel `json:"channels"`

	// Threads are threads in the guild.
	// This field is only sent within the GUILD_CREATE event.
	Threads []payloads.BasePartialChannel `json:"threads"`

	// Presences are presences of the members in the guild, will only include non-offline members if the size is greater than large_threshold.
	// This field is only sent within the GUILD_CREATE event.
	Presences []GatewayPresenceUpdate `json:"presences"`

	// StageInstances are the stage instances in the guild.
	// This field is only sent within the GUILD_CREATE event.
	StageInstances []payloads.StageInstance `json:"stage_instances"`

	// GuildScheduledEvents are the scheduled events in the guild.
	// This field is only sent within the GUILD_CREATE event.
	GuildScheduledEvents []payloads.GuildScheduledEvent `json:"guild_scheduled_events"`

	// SoundboardSounds are the soundboard sounds in the guild.
	// This field is only sent within the GUILD_CREATE event.
	SoundboardSounds []payloads.SoundboardSound `json:"soundboard_sounds"`
}

// GuildCreateDispatch represents a Guild Create dispatch event.
type GuildCreateDispatch struct {
	Op Opcodes                 `json:"op"`
	T  string                  `json:"t"`
	S  int                     `json:"s"`
	D  GuildCreateDispatchData `json:"d"`
}

func (e GuildCreateDispatch) isReceivePayload() {}

// Gateway events use payloads types directly (e.g., payloads.User, payloads.Guild, etc.)
// This avoids unnecessary type aliases and follows Go best practices

// Additional types that need to be implemented or are specialized for gateway
type GuildMemberNoUser struct {
	// GuildMember without user field for gateway events
	Nick         *string             `json:"nick,omitempty"`
	Avatar       *string             `json:"avatar,omitempty"`
	Roles        []discord.Snowflake `json:"roles"`
	JoinedAt     string              `json:"joined_at"`
	PremiumSince *string             `json:"premium_since,omitempty"`
	Deaf         *bool               `json:"deaf,omitempty"`
	Mute         *bool               `json:"mute,omitempty"`
	Flags        *int                `json:"flags,omitempty"`
	Pending      *bool               `json:"pending,omitempty"`
	Permissions  *string             `json:"permissions,omitempty"`
}

type UserWithMember struct {
	payloads.User
	Member *payloads.GuildMember `json:"member,omitempty"`
}

type ChannelMention struct {
	ID      discord.Snowflake `json:"id"`
	GuildID discord.Snowflake `json:"guild_id"`
	Type    int               `json:"type"`
	Name    string            `json:"name"`
}

type Attachment struct {
	ID          discord.Snowflake `json:"id"`
	Filename    string            `json:"filename"`
	Description *string           `json:"description,omitempty"`
	ContentType *string           `json:"content_type,omitempty"`
	Size        int               `json:"size"`
	URL         string            `json:"url"`
	ProxyURL    string            `json:"proxy_url"`
	Height      *int              `json:"height,omitempty"`
	Width       *int              `json:"width,omitempty"`
	Ephemeral   *bool             `json:"ephemeral,omitempty"`
}

type Embed struct {
	Title       *string `json:"title,omitempty"`
	Type        *string `json:"type,omitempty"`
	Description *string `json:"description,omitempty"`
	URL         *string `json:"url,omitempty"`
	Timestamp   *string `json:"timestamp,omitempty"`
	Color       *int    `json:"color,omitempty"`
}

type Reaction struct {
	Count int          `json:"count"`
	Me    bool         `json:"me"`
	Emoji PartialEmoji `json:"emoji"`
}

type PartialEmoji struct {
	ID       *discord.Snowflake `json:"id"`
	Name     *string            `json:"name"`
	Animated *bool              `json:"animated,omitempty"`
}

// Gateway-specific types use payloads types directly without aliases
// No type aliases needed - import payloads and use directly as payloads.MessageType, etc.

type VoiceStateUpdateDispatchData struct {
	// Voice state data
	GuildID   *discord.Snowflake    `json:"guild_id"`
	ChannelID *discord.Snowflake    `json:"channel_id"`
	UserID    discord.Snowflake     `json:"user_id"`
	Member    *payloads.GuildMember `json:"member,omitempty"`
	SessionID string                `json:"session_id"`
	Deaf      bool                  `json:"deaf"`
	Mute      bool                  `json:"mute"`
	SelfDeaf  bool                  `json:"self_deaf"`
	SelfMute  bool                  `json:"self_mute"`
	Suppress  bool                  `json:"suppress"`
}

type GatewayPresenceUpdate struct {
	// Presence update data
	User         PartialUser       `json:"user"`
	GuildID      discord.Snowflake `json:"guild_id"`
	Status       string            `json:"status"`
	Activities   []Activity        `json:"activities"`
	ClientStatus ClientStatus      `json:"client_status"`
}

type PartialUser struct {
	ID       discord.Snowflake `json:"id"`
	Username *string           `json:"username,omitempty"`
	Avatar   *string           `json:"avatar,omitempty"`
}

type Activity struct {
	Name string `json:"name"`
	Type int    `json:"type"`
}

type ClientStatus struct {
	Desktop *string `json:"desktop,omitempty"`
	Mobile  *string `json:"mobile,omitempty"`
	Web     *string `json:"web,omitempty"`
}
